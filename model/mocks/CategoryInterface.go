// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "mytodo/model"

	mock "github.com/stretchr/testify/mock"
)

// CategoryInterface is an autogenerated mock type for the CategoryInterface type
type CategoryInterface struct {
	mock.Mock
}

// AddCategory provides a mock function with given fields: newCategory
func (_m *CategoryInterface) AddCategory(newCategory model.Category) bool {
	ret := _m.Called(newCategory)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.Category) bool); ok {
		r0 = rf(newCategory)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteCategory provides a mock function with given fields: id, idUser
func (_m *CategoryInterface) DeleteCategory(id int, idUser uint) bool {
	ret := _m.Called(id, idUser)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, uint) bool); ok {
		r0 = rf(id, idUser)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetCategories provides a mock function with given fields: page, perpage, id
func (_m *CategoryInterface) GetCategories(page int, perpage int, id uint) []model.Category {
	ret := _m.Called(page, perpage, id)

	var r0 []model.Category
	if rf, ok := ret.Get(0).(func(int, int, uint) []model.Category); ok {
		r0 = rf(page, perpage, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Category)
		}
	}

	return r0
}

// GetCategory provides a mock function with given fields: id, idUser
func (_m *CategoryInterface) GetCategory(id int, idUser uint) *model.Category {
	ret := _m.Called(id, idUser)

	var r0 *model.Category
	if rf, ok := ret.Get(0).(func(int, uint) *model.Category); ok {
		r0 = rf(id, idUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	return r0
}

// UpdateCategory provides a mock function with given fields: category, id, idUser
func (_m *CategoryInterface) UpdateCategory(category model.Category, id int, idUser uint) bool {
	ret := _m.Called(category, id, idUser)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.Category, int, uint) bool); ok {
		r0 = rf(category, id, idUser)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewCategoryInterface creates a new instance of CategoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryInterface {
	mock := &CategoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
