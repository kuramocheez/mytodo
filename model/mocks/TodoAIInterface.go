// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	model "mytodo/model"

	openai "github.com/sashabaranov/go-openai"
)

// TodoAIInterface is an autogenerated mock type for the TodoAIInterface type
type TodoAIInterface struct {
	mock.Mock
}

// GetResponseAPI provides a mock function with given fields: c, key, todoAI
func (_m *TodoAIInterface) GetResponseAPI(c echo.Context, key string, todoAI model.TodoAI) (openai.ChatCompletionResponse, error) {
	ret := _m.Called(c, key, todoAI)

	var r0 openai.ChatCompletionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, model.TodoAI) (openai.ChatCompletionResponse, error)); ok {
		return rf(c, key, todoAI)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, model.TodoAI) openai.ChatCompletionResponse); ok {
		r0 = rf(c, key, todoAI)
	} else {
		r0 = ret.Get(0).(openai.ChatCompletionResponse)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, model.TodoAI) error); ok {
		r1 = rf(c, key, todoAI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTodoAIInterface creates a new instance of TodoAIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoAIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoAIInterface {
	mock := &TodoAIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
