// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "mytodo/model"

	mock "github.com/stretchr/testify/mock"
)

// TodoInterface is an autogenerated mock type for the TodoInterface type
type TodoInterface struct {
	mock.Mock
}

// AddTodo provides a mock function with given fields: newTodo
func (_m *TodoInterface) AddTodo(newTodo model.Todo) bool {
	ret := _m.Called(newTodo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.Todo) bool); ok {
		r0 = rf(newTodo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteTodo provides a mock function with given fields: id, userID
func (_m *TodoInterface) DeleteTodo(id int, userID uint) bool {
	ret := _m.Called(id, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, uint) bool); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetTodo provides a mock function with given fields: id, userID
func (_m *TodoInterface) GetTodo(id int, userID uint) *model.Todo {
	ret := _m.Called(id, userID)

	var r0 *model.Todo
	if rf, ok := ret.Get(0).(func(int, uint) *model.Todo); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Todo)
		}
	}

	return r0
}

// GetTodos provides a mock function with given fields: page, content, userID, status, date
func (_m *TodoInterface) GetTodos(page int, content int, userID uint, status string, date string) []model.Todo {
	ret := _m.Called(page, content, userID, status, date)

	var r0 []model.Todo
	if rf, ok := ret.Get(0).(func(int, int, uint, string, string) []model.Todo); ok {
		r0 = rf(page, content, userID, status, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Todo)
		}
	}

	return r0
}

// UpdateTodo provides a mock function with given fields: id, userID, todo
func (_m *TodoInterface) UpdateTodo(id int, userID uint, todo model.Todo) bool {
	ret := _m.Called(id, userID, todo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, uint, model.Todo) bool); ok {
		r0 = rf(id, userID, todo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateTodoStatus provides a mock function with given fields: id, UserID, status
func (_m *TodoInterface) UpdateTodoStatus(id int, UserID uint, status string) bool {
	ret := _m.Called(id, UserID, status)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, uint, string) bool); ok {
		r0 = rf(id, UserID, status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewTodoInterface creates a new instance of TodoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoInterface {
	mock := &TodoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
